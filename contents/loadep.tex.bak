% !TEX root = ../main.tex

\chapter{页面加载性能分析和优化}

本章利用第二章建立的浏览器工作流程模型，
通过设计实验，观测浏览器开发者面板的网络面板及时间线面板，
得出常用主流浏览器（Chrome, Firefox, Safari, IE）在加载资源期间的依赖模型，
为弥补实验观测的局限性，通过追踪开源浏览器的源代码来验证观测得出的结论。
分析依赖模型的目的，是为了得出浏览器资源加载的关键路径。
而关键路径的明确，则是为了识别其中潜在的加载瓶颈。

为此，本文尝试设计一个 （mit xxhell WProf)


\section{浏览器工作依赖模型}
一个web页面的资源的丰富程度决定了浏览器的资源加载模块工作时的复杂度，
浏览器的工作流程由很多因素影响，
比如网络活动和运算活动的相互依赖，
资源的配置和其他资源的操作，
甚至和浏览器在处理某些活动时的具体实现有关。
为描述本文的依赖模型，先说明两个再之后反复使用的概念。

\textbf{活动：} 如果浏览器中与页面加载相关联的浏览器行为都可以并行完成，
那么页面加载时间将取决于耗时最长的浏览器行为。
然而，现实没有那么理想，在整个页面加载过程中，浏览器的行为会相互影响，
表现为一个模块工作时会阻塞另一个或多个模块的工作。
为了分析这种机制，
本文尝试尽可能保持语义的，在合适的粒度下，
对浏览器各模块的加载流程做一个划分，
这样的一个划分在本文中称为一个\textbf{活动}。
比如，对于文档解析器而言，
解析一个标签（tag）可以看作是一个活动。
在页面加载解析主文档时，
文档解析器会渐进地去执行这个活动。
在脚本组装HTML片段时，也会触发文档解析器执行这样的活动。
又比如，对于资源加载器而言，
从对一个资源发起加载请求（即使是本地缓存存在）
到资源加载完成看作是它的一个活动。
对于脚本解释器，
执行完

\textbf{依赖：} 如果说一个活动$a_i$依赖于活动$a_j$，
那么$a_i$活动的开始必须在$a_j$的活动完成之后。
为兼顾语义性，本文容许存在``部分依赖''的特例，
如异步脚本加载资源的场景下，
资源的加载活动仅需脚本执行到发起加载请求的代码段，
而不是执行完脚本的所有代码。

\subsection{依赖机制分析实验}
为厘清浏览器依赖机制，本文采用的分析方法有三：

\begin{enumerate}
    \item 设计测试页面，使用浏览器开发者工具检查数据
    \item 查询浏览器官方文档和技术文档
    \item 在源码开放的情况下，直接检查浏览器源代码
\end{enumerate}

\subsection{依赖模型分析}

\section{页面加载优化案例分析}

\subsection{无阻塞脚本方案}

\subsection{延迟对页面加载的影响}

